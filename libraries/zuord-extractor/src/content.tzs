import { ModuleContent } from "./module";
import { ContentType } from "./content";
import { Diagnostic } from "./diagnostic";
import { Member } from "./member";

export interface Base {
    target: ModuleContent;
    member: Member.DefinitionLike;
    type: ContentType;
    name?: string | null;
    diagnostics?: Diagnostic.Base[];
}

export default Base;

//

export interface Schema extends ZSchema.Base {
    member: Member.SchemaLike;
    type: ContentType.Schema;
    variants?: Variant[];
}

export interface Variant extends ZSchema.Base {
    schema?: Schema;
    type: ContentType.Variant;
    member: Member.VariantLike;
}

//

export interface ValueVariant extends ZSchema.Variant {
    member: Member.ValueVariable;
    declaredSchemaName?: string | null;
}

export interface FunctionalVariant extends ZSchema.Variant {
    member: Member.FunctionalVariant;
    returnSchemaName?: string | null;
    paramSchemaName?: string | null;
}