import Module from "./module.tzs";
import { ContentType } from "./content";
import { Member as MemberSpec, member as memberSpec } from "./member";
import { getTypeName } from "./~type";

export const isSchema = (content: ZSchema.Base): content is ZSchema.Schema => {
    return content.type === ContentType.Schema;
};

export const isVariant = (content: ZSchema.Base): content is ZSchema.Variant => {
    return content.type === ContentType.Variant;
};

//

export const isValueVariant = (content: ZSchema.Base): content is ZSchema.ValueVariant => {
    return memberSpec.isValueVariable(content.member);
}

export const isFunctionalVariant = (content: ZSchema.Base): content is ZSchema.FunctionalVariant => {
    return memberSpec.isFunctionalVariant(content.member);
}

//

export const createSchema = (
    module: Module, schema: MemberSpec.SchemaLike
) : ZSchema.Schema => {

    return {
        module,
        member: schema,
        type: ContentType.Schema
    };
};

export const createVariant = (
    module: Module, variant: MemberSpec.VariantLike
) : ZSchema.Variant => {

    return {
        module,
        member: variant,
        type: ContentType.Variant
    };
};

//

export const getName = (content: ZSchema.Base) : string | undefined => {
    memberSpec.updateNameNode(content.member);
    return content.member.nameNode?.getText();
}

export const getValueVariantDeclaredSchemaName = (content: ZSchema.ValueVariant) : string | undefined => {
    memberSpec.updateDeclaredType(content.member);
    const typeNode = content.member.declaredType;
    return getTypeName(typeNode);
}

export const getFunctionalVariantReturnSchemaName = (content: ZSchema.FunctionalVariant) : string | undefined => {
    const member = memberSpec.asFunctionLike(content.member);
    if(member) {
        memberSpec.updateReturnType(member);
        const typeNode = member.returnType;
        return getTypeName(typeNode, member.node);
    }

    return undefined;
}

export const getFunctionalVariantParamSchemaName = (content: ZSchema.FunctionalVariant) : string | undefined => {
    const member = memberSpec.asFunctionLike(content.member);

    if(member) {
        memberSpec.updateParamType(member);
        const typeNode = member.paramType;
        return getTypeName(typeNode, member.node);
    }
}

export const getVariantSchema = (content: ZSchema.Variant, schemas: ZSchema.Schema[]) : ZSchema.Schema | undefined => {
    if(isValueVariant(content)) {
        return getValueVariantDeclaredSchema(content, schemas);
    }

    if(isFunctionalVariant(content)) {
        return getFunctionalVariantSchema(content, schemas);
    }
}

export const getValueVariantDeclaredSchema = (content: ZSchema.ValueVariant, schemas: ZSchema.Schema[]) : ZSchema.Schema | undefined => {
    updateValueVariantDeclaredSchemaName(content);

    return schemas.find(s => s.name === content.declaredSchemaName);
}

export const getFunctionalVariantSchema = (content: ZSchema.FunctionalVariant, schemas: ZSchema.Schema[]) : ZSchema.Schema | undefined => {
    return getFunctionalVariantReturnSchema(content, schemas)
        ?? getFunctionalVariantParamSchema(content, schemas);
}

export const getFunctionalVariantReturnSchema = (content: ZSchema.FunctionalVariant, schemas: ZSchema.Schema[]) : ZSchema.Schema | undefined => {
    updateFunctionalVariantReturnSchemaName(content);

    return schemas.find(s => s.name === content.returnSchemaName);
}

export const getFunctionalVariantParamSchema = (content: ZSchema.FunctionalVariant, schemas: ZSchema.Schema[]) : ZSchema.Schema | undefined => {
    updateFunctionalVariantParamSchemaName(content);

    return schemas.find(s => s.name === content.paramSchemaName);
}

//

export const updateName = (content: ZSchema.Base) : void => {
    if(content.name == undefined) {
        content.name = getName(content);
    }
};

export const updateVariantSchema = (content: ZSchema.Variant, schemas: ZSchema.Schema[]) : void => {
    if(content.schema == undefined) {
        content.schema = getVariantSchema(content, schemas);
    }
};

export const updateValueVariantDeclaredSchema = (content: ZSchema.ValueVariant, schemas: ZSchema.Schema[]) : void => {
    if(content.schema == undefined) {
        content.schema = getValueVariantDeclaredSchema(content, schemas);
    }
}

export const updateValueVariantDeclaredSchemaName = (content: ZSchema.ValueVariant) : void => {
    if(content.declaredSchemaName == undefined) {
        content.declaredSchemaName = getValueVariantDeclaredSchemaName(content);
    }
}

export const updateFunctionalVariantReturnSchemaName = (content: ZSchema.FunctionalVariant) : void => {
    if(content.returnSchemaName == undefined) {
        content.returnSchemaName = getFunctionalVariantReturnSchemaName(content);
    }
};

export const updateFunctionalVariantParamSchemaName = (content: ZSchema.FunctionalVariant) : void => {
    if(content.paramSchemaName == undefined) {
        content.paramSchemaName = getFunctionalVariantParamSchemaName(content);
    }
}