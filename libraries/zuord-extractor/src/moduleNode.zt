import { TypeAliasDeclaration, InterfaceDeclaration, EnumDeclaration, FunctionDeclaration, VariableStatement, ImportDeclaration, ExportDeclaration, ExportAssignment, ArrowFunction as $ArrowFunction, FunctionExpression as $FunctionExpression } from "ts-morph";
import { ValueSyntaxNode } from "./~valueSyntax";

export type Import = ImportDeclaration;

export type Export = ExportDeclaration;

export type ExportDefault = ExportAssignment;

export type Type = TypeAliasDeclaration;

export type Interface = InterfaceDeclaration;

export type Enum = EnumDeclaration;

export type Variable = VariableStatement;

export type Function = FunctionDeclaration;

export type Value = ValueSyntaxNode;

export type ArrowFunction = $ArrowFunction;

export type FunctionExpression = $FunctionExpression;

//

export type KnownLike =
    | ZType.ESMLike
    | ZType.SchemaLike
    | ZType.VariantLike
    | ZType.InitializerLike;

export type ESMLike = 
    | ZType.Import
    | ZType.Export
    | ZType.ExportDefault;

export type ExportLike = 
    | ZType.Export
    | ZType.ExportDefault;

export type DefinitionLike =
    | ZType.SchemaLike
    | ZType.VariantLike;

export type SchemaLike =
    | ZType.Type
    | ZType.Interface

export type VariantLike =
    | ZType.Variable
    | ZType.Function;

export type InitializerLike = 
    | ZType.Value
    | ZType.ArrowFunction
    | ZType.FunctionExpression;

export type FunctionLike =
    | ZType.Function
    | ZType.FunctionAlt;

export type FunctionAlt = 
    | ZType.ArrowFunction
    | ZType.FunctionExpression;

//

export type Discarded =
    | ZType.DiscardedSchema
    | ZType.DiscardedVariant;

export type DiscardedSchema = 
    | ZType.VariantLike;

export type DiscardedVariant =
    | ZType.SchemaLike;