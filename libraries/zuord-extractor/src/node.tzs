import * as tsm from "ts-morph";
import { ValueSyntaxNode } from "./~valueSyntax";

export type Import = tsm.ImportDeclaration;

export type Export = tsm.ExportDeclaration;

export type ExportDefault = tsm.ExportAssignment;

export type Type = tsm.TypeAliasDeclaration;

export type Interface = tsm.InterfaceDeclaration;

export type Class = tsm.ClassDeclaration;

export type Enum = tsm.EnumDeclaration;

export type Variable = tsm.VariableStatement;

export type Function = tsm.FunctionDeclaration;

export type Value = ValueSyntaxNode;

export type ArrowFunction = tsm.ArrowFunction;

export type FunctionExpression = tsm.FunctionExpression;

//

export type Any = tsm.Node;

export type KnownLike =
    | ZSchema.ESMLike
    | ZSchema.DefinitionLike
    | ZSchema.InitializerLike;

export type GlobalLike =
    | ESMLike;

export type ESMLike = 
    | ZSchema.Import
    | ZSchema.ExportLike

export type ExportLike = 
    | ZSchema.Export
    | ZSchema.ExportDefault;

export type DefinitionLike = 
    | ZSchema.GlobalLike
    | ZSchema.DefinitionOnly;

export type DefinitionOnly =
    | ZSchema.SchemaOnly
    | ZSchema.VariantOnly;

export type SchemaLike =
    | ZSchema.GlobalLike
    | ZSchema.SchemaOnly;

export type SchemaOnly =
    | ZSchema.Type
    | ZSchema.Interface
    | ZSchema.Enum
    | ZSchema.Class;

export type VariantLike =
    | ZSchema.GlobalLike
    | ZSchema.VariantOnly;

export type VariantOnly =
    | ZSchema.Variable
    | ZSchema.Function;

export type InitializerLike = 
    | ZSchema.Value
    | ZSchema.ArrowFunction
    | ZSchema.FunctionExpression;

export type FunctionLike =
    | ZSchema.Function
    | ZSchema.FunctionAlt;

export type FunctionAlt = 
    | ZSchema.ArrowFunction
    | ZSchema.FunctionExpression;

//

export type Discarded =
    | ZSchema.DiscardedSchema
    | ZSchema.DiscardedVariant;

export type DiscardedSchema = 
    | ZSchema.VariantOnly;

export type DiscardedVariant =
    | ZSchema.SchemaOnly;