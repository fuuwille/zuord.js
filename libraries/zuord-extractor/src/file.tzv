import fs from "fs";
import path from "path";
import { Project, SourceFile } from "ts-morph";
import { FileType } from "./file";
import { File, FileBase } from "./file";
import { memberSpec } from "./member";
import { nodeSpec } from "./node";

export const initialize = (
    sourceFile: SourceFile, mode: FileType
) : FileBase => {

    const moduleFile : FileBase = {
        source: sourceFile,
        type: mode,
        members: [],
        discarded: [],
        others: []
    };

    sourceFile.forEachChild((node) => {
        const member = memberSpec.create(node);

        if(nodeSpec.isKnownLike(node)) {
            const collection = nodeSpec.isDiscardedBy(node, mode)
                ? moduleFile.discarded
                : moduleFile.members;

            collection.push(member);
        }
        else {
            moduleFile.others.push(member);
        }
    });

    return moduleFile;
};

export const extract = (sourceFile: SourceFile, mode: FileType) : FileBase => {
    switch(mode) {
        case FileType.TS:
        case FileType.TZS:
            return extractSchema(sourceFile);
        case FileType.TV:
        case FileType.TZV:
            return extractVariants(sourceFile);
        default:
            throw new Error(`Unknown module file kind: ${mode}`);
    }
};

export const extractAtPath = <TFile extends FileBase>(dir: string, name: string, mode: FileType) : TFile | undefined => {
    const fileName = `${name}.${mode.toLowerCase()}.ts`;
    const filePath = path.join(dir, fileName);

    const sourceFile = new Project().addSourceFileAtPath(filePath);

    if(fs.existsSync(filePath)) {
        return extract(sourceFile, mode) as TFile;
    }

    return undefined;
};

export const extractSchema = (sourceFile: SourceFile) : File.Schema => {
    return initialize(sourceFile, FileType.TZS) as File.Schema;
};

export const extractVariants = (sourceFile: SourceFile) : File.Variants => {
    return initialize(sourceFile, FileType.TZV) as File.Variants;
};