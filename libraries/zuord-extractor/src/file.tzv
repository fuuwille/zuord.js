import fs from "fs";
import path from "path";
import { Project, SourceFile } from "ts-morph";
import { FileExtension, getType } from "./file";
import { File, FileBase } from "./file";
import { member } from "./member";
import { node } from "./node";

export const create = (sourceFile: SourceFile, extension: FileExtension) : ZSchema.Base => {
    return {
        source: sourceFile,
        extension,
        type: getType(extension)!,
        members: [],
        discarded: [],
        others: []
    };
};

export const initialize = (sourceFile: SourceFile, extension: FileExtension) : ZSchema.Base => {
    const file = create(sourceFile, extension);

    sourceFile.forEachChild((child) => {
        const instance = member.create(child);

        if(node.isKnownLike(child)) {
            const collection = node.isDiscardedBy(child, extension)
                ? file.discarded
                : file.members;

            collection.push(instance);
        }
        else {
            file.others.push(instance);
        }
    });

    return file;
};

export const extract = <TFile extends ZSchema.Base>(dir: string, name: string, extension: FileExtension) : TFile | undefined => {
    const fileName = `${name}.${extension.toLowerCase()}`;
    const filePath = path.join(dir, fileName);

    const sourceFile = new Project().addSourceFileAtPath(filePath);

    if(fs.existsSync(filePath)) {
        return initialize(sourceFile, extension) as TFile;
    }

    return undefined;
};