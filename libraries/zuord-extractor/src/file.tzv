import fs from "fs";
import path from "path";
import { Project, SourceFile } from "ts-morph";
import { FileCompiledTextOptions, FileExtension, FileSchemaExtension, FileVariantExtension, fileUtility } from "./file";
import { member } from "./member";
import { node } from "./node";

export const create = (sourceFile: SourceFile, extension: FileExtension) : ZSchema.Base => {
    return {
        source: sourceFile,
        extension,
        type: fileUtility.getType(extension)!,
        members: [],
        discarded: [],
        others: []
    };
};

export const initialize = (sourceFile: SourceFile, extension: FileExtension) : ZSchema.Base => {
    const file = create(sourceFile, extension);

    sourceFile.forEachChild((child) => {
        const instance = member.create(child);

        if(node.isKnownLike(child)) {
            const collection = node.isDiscardedBy(child, extension)
                ? file.discarded
                : file.members;

            collection.push(instance);
        }
        else {
            file.others.push(instance);
        }
    });

    return file;
};

export const extract = (dir: string, name: string, extension: FileExtension) : ZSchema.Base | undefined => {
    const fileName = `${name}.${extension.toLowerCase()}`;
    const filePath = path.join(dir, fileName);

    if(fs.existsSync(filePath)) {    
        const sourceFile = new Project().addSourceFileAtPath(filePath);
        return initialize(sourceFile, extension);
    }

    return undefined;
};

export const extractSchema = (dir: string, name: string, extension: FileSchemaExtension) : ZSchema.Schema | undefined => {
    return extract(dir, name, extension) as ZSchema.Schema | undefined;
};

export const extractVariant = (dir: string, name: string, extension: FileVariantExtension) : ZSchema.Variant | undefined => {
    return extract(dir, name, extension) as ZSchema.Variant | undefined;
};

//

export const compiledText = (file: ZSchema.Base, options: FileCompiledTextOptions) : string => {
    const fileName = file.source.getBaseNameWithoutExtension();
    let fileText = "";

    switch(file.extension) {
        case FileExtension.TS:
            if(options.tzs) {
                fileText += `export * as ${fileName[0].toUpperCase() + fileName.slice(1)} from './${fileName}.zschema';`;
            }

            if(options.tzu) {
                fileText += `export * as ${fileName}Utility from './${fileName}.zutility';`;
            }

            if(options.tzv) {
                fileText += `export * as ${fileName} from './${fileName}.zvariant';`;
            }
            break;
        case FileExtension.TZS:
        case FileExtension.TZV:
            if(options.tzs) {
                fileText += `import * as ZSchema from './${fileName}.zschema';`;
            }
            break;
        default:
            break;
    }

    for(const member of file.members) {
        fileText += `${member.node.getFullText()}`;
    }

    return fileText;
}