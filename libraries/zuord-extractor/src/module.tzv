import { SourceFile } from "ts-morph";
import { FileExtension } from "./file";
import { FileSpec, fileSpec } from "./file";
import { contentSpec } from "./content";
import { memberSpec } from "./member";
import { diagnostic } from "./diagnostic";

export const update = (module: ZSchema.Module): void => {
    const schemaMembers = module.schemaFile?.members;
    const variantMembers = module.variantsFile?.members;

    module.schemaContents = [];
    module.variantContents = [];

    if(schemaMembers) {
        for(const member of schemaMembers.filter(memberSpec.isSchemaLike)) {
            const schemaContent = contentSpec.createSchema(module, member);
            contentSpec.updateName(schemaContent);

            module.schemaContents.push(schemaContent);
        }
    }

    if(variantMembers) {
        for(const member of variantMembers.filter(memberSpec.isVariantLike)) {
            const variantContent = contentSpec.createVariant(module, member);
            contentSpec.updateName(variantContent);

            module.variantContents.push(variantContent);
        }
    }

    if(module.variantContents.length > 0) {
        for(const variantContent of module.variantContents) {
            const schema = contentSpec.getVariantSchema(variantContent, module.schemaContents);

            if(schema) {
                variantContent.schema = schema;

                schema.variants ??= [];
                schema.variants.push(variantContent);
            }

            if(contentSpec.isFunctionalVariant(variantContent)) {
                const member = memberSpec.asFunctionLike(variantContent.member);

                const returnNode = member?.returnType;

                if(!returnNode) {
                    variantContent.diagnostics ??= [];
                    variantContent.diagnostics.push(
                        diagnostic.buildInDiagnostics.noReturnType(variantContent.member.nameNode!)
                    );
                }
            }
        }
    }
};

export const extract = (dir: string, name: string): ZSchema.Module => {
    const module: ZSchema.Module = {
        name,
        schemaFile: fileSpec.extractAtPath<FileSpec.Schema>(dir, name, FileExtension.TZS) ?? null,
        variantsFile: fileSpec.extractAtPath<FileSpec.Variant>(dir, name, FileExtension.TZV) ?? null,
        schemaContents: [],
        variantContents: [],
    };

    update(module);
    return module;
};

export const updateSchema = (module: ZSchema.Module, sourceFile: SourceFile | null): void => {
    module.schemaFile = sourceFile ? fileSpec.extractSchema(sourceFile) : null;
    update(module);
};

export const updateVariant = (module: ZSchema.Module, sourceFile: SourceFile | null): void => {
    module.variantsFile = sourceFile ? fileSpec.extractVariant(sourceFile) : null;
    update(module);
};
