import { TypeAliasDeclaration, InterfaceDeclaration, EnumDeclaration, FunctionDeclaration, VariableStatement, ImportDeclaration, ExportDeclaration, ExportAssignment, ArrowFunction as $ArrowFunction, FunctionExpression as $FunctionExpression, Node } from "ts-morph";
import { ValueSyntaxNode } from "./~valueSyntax";

export type Import = ImportDeclaration;

export type Export = ExportDeclaration;

export type ExportDefault = ExportAssignment;

export type Type = TypeAliasDeclaration;

export type Interface = InterfaceDeclaration;

export type Enum = EnumDeclaration;

export type Variable = VariableStatement;

export type Function = FunctionDeclaration;

export type Value = ValueSyntaxNode;

export type ArrowFunction = $ArrowFunction;

export type FunctionExpression = $FunctionExpression;

//

export type KnownLike =
    | ZSchema.ESMLike
    | ZSchema.SchemaOnly
    | ZSchema.VariantOnly
    | ZSchema.InitializerLike;

export type ESMLike = 
    | ZSchema.Import
    | ZSchema.ExportLike

export type ExportLike = 
    | ZSchema.Export
    | ZSchema.ExportDefault;

export type DefinitionOnly =
    | ZSchema.SchemaOnly
    | ZSchema.VariantOnly;

export type SchemaOnly =
    | ZSchema.Type
    | ZSchema.Interface

export type VariantOnly =
    | ZSchema.Variable
    | ZSchema.Function;

export type InitializerLike = 
    | ZSchema.Value
    | ZSchema.ArrowFunction
    | ZSchema.FunctionExpression;

export type FunctionLike =
    | ZSchema.Function
    | ZSchema.FunctionAlt;

export type FunctionAlt = 
    | ZSchema.ArrowFunction
    | ZSchema.FunctionExpression;

//

export type Discarded =
    | ZSchema.DiscardedSchema
    | ZSchema.DiscardedVariant;

export type DiscardedSchema = 
    | ZSchema.VariantOnly;

export type DiscardedVariant =
    | ZSchema.SchemaOnly;