import { BindingName, TypeNode } from "ts-morph";
import { Node } from "./node";
import { MemberDefinitionLikeType, MemberDefinitionOnlyType, MemberESMLikeType, MemberFunctionAltType, MemberGlobalLikeType, MemberInitializerLikeType, MemberSchemaLikeType, MemberSchemaOnlyType, MemberType, MemberVariantLikeType, MemberVariantOnlyType } from "./member";

export interface Base {
    node: Node.Base;
    type: MemberType;
}

export default Base;

//

export interface Unknown extends ZSchema.Base {
    type: MemberType.Unknown;
}

export interface Import extends ZSchema.Base, ZSchema.KnownLike, ZSchema.GlobalLike, ZSchema.ESMLike {
    node: Node.Import;
    type: MemberType.Import;
}

export interface Export extends ZSchema.Base, ZSchema.KnownLike, ZSchema.GlobalLike, ZSchema.ESMLike {
    node: Node.Export;
    type: MemberType.Export;
}

export interface ExportDefault extends ZSchema.Base, ZSchema.KnownLike, ZSchema.GlobalLike, ZSchema.ESMLike {
    node: Node.ExportDefault;
    type: MemberType.ExportDefault;
}

export interface Type extends ZSchema.Base, ZSchema.KnownLike, ZSchema.DefinitionOnly, ZSchema.SchemaOnly {
    node: Node.Type;
    type: MemberType.Type;
}

export interface Interface extends ZSchema.Base, ZSchema.KnownLike, ZSchema.DefinitionOnly, ZSchema.SchemaOnly {
    node: Node.Interface;
    type: MemberType.Interface;
}

export interface Class extends ZSchema.Base, ZSchema.KnownLike, ZSchema.DefinitionOnly, ZSchema.SchemaOnly {
    node: Node.Class;
    type: MemberType.Class;
}

export interface Enum extends ZSchema.Base, ZSchema.KnownLike, ZSchema.DefinitionOnly, ZSchema.SchemaOnly {
    node: Node.Enum;
    type: MemberType.Enum;
}

export interface Variable extends ZSchema.Base, ZSchema.KnownLike, ZSchema.DefinitionOnly, ZSchema.VariantOnly {
    node: Node.Variable;
    type: MemberType.Variable;
    initializer?: InitializerLike;
}

export interface Function extends ZSchema.Base, ZSchema.KnownLike, ZSchema.DefinitionOnly, ZSchema.VariantOnly, ZSchema.FunctionLike {
    node: Node.Function;
    type: MemberType.Function;
}

export interface Value extends ZSchema.Base, ZSchema.KnownLike, ZSchema.InitializerLike {
    node: Node.Value;
    type: MemberType.Value;
}

export interface ArrowFunction extends ZSchema.Base, ZSchema.KnownLike, ZSchema.InitializerLike, ZSchema.FunctionAlt {
    node: Node.ArrowFunction;
    type: MemberType.ArrowFunction;
}

export interface FunctionExpression extends ZSchema.Base, ZSchema.KnownLike, ZSchema.InitializerLike, ZSchema.FunctionAlt {
    node: Node.FunctionExpression;
    type: MemberType.FunctionExpression;
}

//

export interface KnownLike extends ZSchema.Base {
    node: Node.KnownLike;
}

export interface GlobalLike extends ZSchema.Base, ZSchema.KnownLike {
    node: Node.GlobalLike;
    type: MemberGlobalLikeType;
}

export interface ESMLike extends ZSchema.Base, ZSchema.KnownLike, ZSchema.GlobalLike {
    node: Node.ESMLike;
    type: MemberESMLikeType;
}

export interface DefinitionLike extends ZSchema.Base, ZSchema.KnownLike {
    node: Node.DefinitionLike;
    type: MemberDefinitionLikeType;
    nameNode?: BindingName | null;
}

export interface DefinitionOnly extends ZSchema.Base, ZSchema.KnownLike, ZSchema.DefinitionLike {
    node: Node.DefinitionOnly;
    type: MemberDefinitionOnlyType;
}

export interface SchemaLike extends ZSchema.Base, ZSchema.KnownLike, ZSchema.DefinitionLike {
    node: Node.SchemaLike;
    type: MemberSchemaLikeType;
}

export interface SchemaOnly extends ZSchema.Base, ZSchema.KnownLike, ZSchema.DefinitionOnly, ZSchema.SchemaLike {
    node: Node.SchemaOnly;
    type: MemberSchemaOnlyType;
}

export interface VariantLike extends ZSchema.Base, ZSchema.KnownLike, ZSchema.DefinitionLike {
    node: Node.VariantLike;
    type: MemberVariantLikeType;
}

export interface VariantOnly extends ZSchema.Base, ZSchema.KnownLike, ZSchema.DefinitionOnly, ZSchema.VariantLike {
    node: Node.VariantOnly;
    type: MemberVariantOnlyType;
}

export interface InitializerLike extends ZSchema.Base, ZSchema.KnownLike {
    node: Node.InitializerLike;
    type: MemberInitializerLikeType;
}

export interface ValueVariable extends ZSchema.Variable {
    initializer?: Value;
    declaredType?: TypeNode;
}

export interface FunctionalVariable extends ZSchema.Variable {
    initializer?: FunctionAlt;
}

export interface FunctionLike extends ZSchema.Base {
    node: Node.FunctionLike;
    returnType?: TypeNode;
    paramType?: TypeNode;
}

export interface FunctionAlt extends ZSchema.FunctionLike {
    node: Node.FunctionAlt;
    type: MemberFunctionAltType;
}

//

export type FunctionalVariant =
    | ZSchema.Function
    | ZSchema.FunctionalVariable;