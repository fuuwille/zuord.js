import { BindingName, TypeNode, Node } from "ts-morph";
import { NodeSpec } from "./node";
import { MemberType } from "./member";

export interface Base {
    node: Node;
    type: MemberType;
}

export default Base;

//

export interface Unknown extends ZSchema.Base {
    type: MemberType.Unknown;
}

export interface Import extends ZSchema.Base, ZSchema.KnownLike, ZSchema.GlobalLike, ZSchema.ESMLike {
    node: NodeSpec.Import;
    type: MemberType.Import;
}

export interface Export extends ZSchema.Base, ZSchema.KnownLike, ZSchema.GlobalLike, ZSchema.ESMLike {
    node: NodeSpec.Export;
    type: MemberType.Export;
}

export interface ExportDefault extends ZSchema.Base, ZSchema.KnownLike, ZSchema.GlobalLike, ZSchema.ESMLike {
    node: NodeSpec.ExportDefault;
    type: MemberType.ExportDefault;
}

export interface Type extends ZSchema.Base, ZSchema.KnownLike, ZSchema.DefinitionOnly, ZSchema.SchemaOnly {
    node: NodeSpec.Type;
    type: MemberType.Type;
}

export interface Interface extends ZSchema.Base, ZSchema.KnownLike, ZSchema.DefinitionOnly, ZSchema.SchemaOnly {
    node: NodeSpec.Interface;
    type: MemberType.Interface;
}

export interface Class extends ZSchema.Base, ZSchema.KnownLike, ZSchema.DefinitionOnly, ZSchema.SchemaOnly {
    node: NodeSpec.Class;
    type: MemberType.Class;
}

export interface Enum extends ZSchema.Base, ZSchema.KnownLike, ZSchema.DefinitionOnly, ZSchema.SchemaOnly {
    node: NodeSpec.Enum;
    type: MemberType.Enum;
}

export interface Variable extends ZSchema.Base, ZSchema.KnownLike, ZSchema.DefinitionOnly, ZSchema.VariantOnly {
    node: NodeSpec.Variable;
    type: MemberType.Variable;
    initializer?: InitializerLike;
}

export interface Function extends ZSchema.Base, ZSchema.KnownLike, ZSchema.DefinitionOnly, ZSchema.VariantOnly, ZSchema.FunctionLike {
    node: NodeSpec.Function;
    type: MemberType.Function;
}

export interface Value extends ZSchema.Base, ZSchema.KnownLike, ZSchema.InitializerLike {
    node: NodeSpec.Value;
    type: MemberType.Value;
}

export interface ArrowFunction extends ZSchema.Base, ZSchema.KnownLike, ZSchema.InitializerLike, ZSchema.FunctionAlt {
    node: NodeSpec.ArrowFunction;
    type: MemberType.ArrowFunction;
}

export interface FunctionExpression extends ZSchema.Base, ZSchema.KnownLike, ZSchema.InitializerLike, ZSchema.FunctionAlt {
    node: NodeSpec.FunctionExpression;
    type: MemberType.FunctionExpression;
}

//

export interface KnownLike extends ZSchema.Base {
    node: NodeSpec.KnownLike;
}

export interface GlobalLike extends ZSchema.Base, ZSchema.KnownLike {
    node: NodeSpec.GlobalLike;
    type: MemberType.Import | MemberType.Export | MemberType.ExportDefault;
}

export interface ESMLike extends ZSchema.Base, ZSchema.KnownLike, ZSchema.GlobalLike {
    node: NodeSpec.ESMLike;
    type: MemberType.Import | MemberType.Export | MemberType.ExportDefault;
}

export interface DefinitionLike extends ZSchema.Base, ZSchema.KnownLike {
    node: NodeSpec.DefinitionLike;
    type: MemberType.Import | MemberType.Export | MemberType.ExportDefault | MemberType.Type | MemberType.Interface | MemberType.Enum | MemberType.Class | MemberType.Variable | MemberType.Function;
    nameNode?: BindingName | null;
}

export interface DefinitionOnly extends ZSchema.Base, ZSchema.KnownLike, ZSchema.DefinitionLike {
    node: NodeSpec.DefinitionOnly;
    type: MemberType.Type | MemberType.Interface | MemberType.Class | MemberType.Enum | MemberType.Variable | MemberType.Function;
}

export interface SchemaLike extends ZSchema.Base, ZSchema.KnownLike, ZSchema.DefinitionLike {
    node: NodeSpec.SchemaLike;
    type: MemberType.Import | MemberType.Export | MemberType.ExportDefault | MemberType.Type | MemberType.Interface | MemberType.Class | MemberType.Enum;
}

export interface SchemaOnly extends ZSchema.Base, ZSchema.KnownLike, ZSchema.DefinitionOnly, ZSchema.SchemaLike {
    node: NodeSpec.SchemaOnly;
    type: MemberType.Type | MemberType.Interface | MemberType.Class | MemberType.Enum;
}

export interface VariantLike extends ZSchema.Base, ZSchema.KnownLike, ZSchema.DefinitionLike {
    node: NodeSpec.VariantLike;
    type: MemberType.Import | MemberType.Export | MemberType.ExportDefault | MemberType.Variable | MemberType.Function;
}

export interface VariantOnly extends ZSchema.Base, ZSchema.KnownLike, ZSchema.DefinitionOnly, ZSchema.VariantLike {
    node: NodeSpec.VariantOnly;
    type: MemberType.Variable | MemberType.Function;
}

export interface InitializerLike extends ZSchema.Base, ZSchema.KnownLike {
    node: NodeSpec.InitializerLike;
    type: MemberType.Value | MemberType.ArrowFunction | MemberType.FunctionExpression;
}

export interface ValueVariable extends ZSchema.Variable {
    initializer?: Value;
    declaredType?: TypeNode;
}

export interface FunctionalVariable extends ZSchema.Variable {
    initializer?: FunctionAlt;
}

export interface FunctionLike extends ZSchema.Base {
    node: NodeSpec.FunctionLike;
    returnType?: TypeNode;
    paramType?: TypeNode;
}

export interface FunctionAlt extends ZSchema.FunctionLike {
    node: NodeSpec.FunctionAlt;
    type: MemberType.ArrowFunction | MemberType.FunctionExpression;
}

//

export type FunctionalVariant =
    | ZSchema.Function
    | ZSchema.FunctionalVariable;