import { BindingName, TypeNode, Node } from "ts-morph";
import { Node as ZNode } from "./node";
import { MemberKind } from "./member";

export interface Base {
    node: Node;
    kind: MemberKind;
}

export default Base;

//

export interface Unknown extends ZSchema.Base {
    kind: MemberKind.Unknown;
}

export interface Import extends ZSchema.Base, ZSchema.KnownLike, ZSchema.GlobalLike, ZSchema.ESMLike {
    node: ZNode.Import;
    kind: MemberKind.Import;
}

export interface Export extends ZSchema.Base, ZSchema.KnownLike, ZSchema.GlobalLike, ZSchema.ESMLike {
    node: ZNode.Export;
    kind: MemberKind.Export;
}

export interface ExportDefault extends ZSchema.Base, ZSchema.KnownLike, ZSchema.GlobalLike, ZSchema.ESMLike {
    node: ZNode.ExportDefault;
    kind: MemberKind.ExportDefault;
}

export interface Type extends ZSchema.Base, ZSchema.KnownLike, ZSchema.DefinitionOnly, ZSchema.SchemaOnly {
    node: ZNode.Type;
    kind: MemberKind.Type;
}

export interface Interface extends ZSchema.Base, ZSchema.KnownLike, ZSchema.DefinitionOnly, ZSchema.SchemaOnly {
    node: ZNode.Interface;
    kind: MemberKind.Interface;
}

export interface Variable extends ZSchema.Base, ZSchema.KnownLike, ZSchema.DefinitionOnly, ZSchema.VariantOnly {
    node: ZNode.Variable;
    kind: MemberKind.Variable;
    initializer?: InitializerLike;
}

export interface Function extends ZSchema.Base, ZSchema.KnownLike, ZSchema.DefinitionOnly, ZSchema.VariantOnly, ZSchema.FunctionLike {
    node: ZNode.Function;
    kind: MemberKind.Function;
}

export interface Value extends ZSchema.Base, ZSchema.KnownLike, ZSchema.InitializerLike {
    node: ZNode.Value;
    kind: MemberKind.Value;
}

export interface ArrowFunction extends ZSchema.Base, ZSchema.KnownLike, ZSchema.InitializerLike, ZSchema.FunctionAlt {
    node: ZNode.ArrowFunction;
    kind: MemberKind.ArrowFunction;
}

export interface FunctionExpression extends ZSchema.Base, ZSchema.KnownLike, ZSchema.InitializerLike, ZSchema.FunctionAlt {
    node: ZNode.FunctionExpression;
    kind: MemberKind.FunctionExpression;
}

//

export interface KnownLike extends ZSchema.Base {
    node: ZNode.KnownLike;
}

export interface GlobalLike extends ZSchema.Base, ZSchema.KnownLike {
    node: ZNode.GlobalLike;
    kind: MemberKind.Import | MemberKind.Export | MemberKind.ExportDefault;
}

export interface ESMLike extends ZSchema.Base, ZSchema.KnownLike, ZSchema.GlobalLike {
    node: ZNode.ESMLike;
    kind: MemberKind.Import | MemberKind.Export | MemberKind.ExportDefault;
}

export interface DefinitionLike extends ZSchema.Base, ZSchema.KnownLike {
    node: ZNode.DefinitionLike;
    kind: MemberKind.Import | MemberKind.Export | MemberKind.ExportDefault | MemberKind.Type | MemberKind.Interface | MemberKind.Variable | MemberKind.Function;
    nameNode?: BindingName | null;
}

export interface DefinitionOnly extends ZSchema.Base, ZSchema.KnownLike, ZSchema.DefinitionLike {
    node: ZNode.DefinitionOnly;
    kind: MemberKind.Type | MemberKind.Interface | MemberKind.Variable | MemberKind.Function;
}

export interface SchemaLike extends ZSchema.Base, ZSchema.KnownLike, ZSchema.DefinitionLike {
    node: ZNode.SchemaLike;
    kind: MemberKind.Import | MemberKind.Export | MemberKind.ExportDefault | MemberKind.Type | MemberKind.Interface;
}

export interface SchemaOnly extends ZSchema.Base, ZSchema.KnownLike, ZSchema.DefinitionOnly, ZSchema.SchemaLike {
    node: ZNode.SchemaOnly;
    kind: MemberKind.Type | MemberKind.Interface;
}

export interface VariantLike extends ZSchema.Base, ZSchema.KnownLike, ZSchema.DefinitionLike {
    node: ZNode.VariantLike;
    kind: MemberKind.Import | MemberKind.Export | MemberKind.ExportDefault | MemberKind.Variable | MemberKind.Function;
}

export interface VariantOnly extends ZSchema.Base, ZSchema.KnownLike, ZSchema.DefinitionOnly, ZSchema.VariantLike {
    node: ZNode.VariantOnly;
    kind: MemberKind.Variable | MemberKind.Function;
}

export interface InitializerLike extends ZSchema.Base, ZSchema.KnownLike {
    node: ZNode.InitializerLike;
    kind: MemberKind.Value | MemberKind.ArrowFunction | MemberKind.FunctionExpression;
}

export interface ValueVariable extends ZSchema.Variable {
    initializer?: Value;
    declaredTypeNode?: TypeNode;
}

export interface FunctionalVariable extends ZSchema.Variable {
    initializer?: FunctionAlt;
}

export interface FunctionLike extends ZSchema.Base {
    node: ZNode.FunctionLike;
    returnTypeNode?: TypeNode;
    paramTypeNode?: TypeNode;
}

export interface FunctionAlt extends ZSchema.FunctionLike {
    node: ZNode.FunctionAlt;
    kind: MemberKind.ArrowFunction | MemberKind.FunctionExpression;
}

//

export type FunctionalVariant =
    | ZSchema.Function
    | ZSchema.FunctionalVariable;