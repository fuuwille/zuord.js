import { BindingName, TypeNode, Node } from "ts-morph";
import { Node as NodeNest } from "./node";
import { MemberType } from "./member";

export class Base {
    #node: Node;
    #type: MemberType;

    constructor(node: Node, type: MemberType) {
        this.#node = node;
        this.#type = type;
    }

    //

    public get node(): Node {
        return this.#node;
    }

    public get type(): MemberType {
        return this.#type;
    }
}

export default Base;

//

export class Unknown extends ZSchema.Base {
    constructor(node: Node) {
        super(node, MemberType.Unknown);
    }
}

export class Import extends ZSchema.Base implements ZSchema.KnownLike, ZSchema.GlobalLike, ZSchema.ESMLike {
    constructor(node: NodeNest.Import) {
        super(node, MemberType.Import);
    }

    public get node(): NodeNest.Import {
        return this.node;
    }

    public get type(): MemberType.Import {
        return this.type;
    }
}

export class Export extends ZSchema.Base implements ZSchema.KnownLike, ZSchema.GlobalLike, ZSchema.ESMLike {
    constructor(node: NodeNest.Export) {
        super(node, MemberType.Export);
    }
    
    public get node(): NodeNest.Export {
        return this.node;
    }

    public get type(): MemberType.Export {
        return this.type;
    }
}

export interface ExportDefault extends ZSchema.Base, ZSchema.KnownLike, ZSchema.GlobalLike, ZSchema.ESMLike {
    node: NodeNest.ExportDefault;
    type: MemberType.ExportDefault;
}

export interface Type extends ZSchema.Base, ZSchema.KnownLike, ZSchema.DefinitionOnly, ZSchema.SchemaOnly {
    node: NodeNest.Type;
    type: MemberType.Type;
}

export interface Interface extends ZSchema.Base, ZSchema.KnownLike, ZSchema.DefinitionOnly, ZSchema.SchemaOnly {
    node: NodeNest.Interface;
    type: MemberType.Interface;
}

export interface Variable extends ZSchema.Base, ZSchema.KnownLike, ZSchema.DefinitionOnly, ZSchema.VariantOnly {
    node: NodeNest.Variable;
    type: MemberType.Variable;
    initializer?: InitializerLike;
}

export interface Function extends ZSchema.Base, ZSchema.KnownLike, ZSchema.DefinitionOnly, ZSchema.VariantOnly, ZSchema.FunctionLike {
    node: NodeNest.Function;
    type: MemberType.Function;
}

export interface Value extends ZSchema.Base, ZSchema.KnownLike, ZSchema.InitializerLike {
    node: NodeNest.Value;
    type: MemberType.Value;
}

export interface ArrowFunction extends ZSchema.Base, ZSchema.KnownLike, ZSchema.InitializerLike, ZSchema.FunctionAlt {
    node: NodeNest.ArrowFunction;
    type: MemberType.ArrowFunction;
}

export interface FunctionExpression extends ZSchema.Base, ZSchema.KnownLike, ZSchema.InitializerLike, ZSchema.FunctionAlt {
    node: NodeNest.FunctionExpression;
    type: MemberType.FunctionExpression;
}

//

export interface KnownLike extends ZSchema.Base {
    node: NodeNest.KnownLike;
}

export interface GlobalLike extends ZSchema.Base, ZSchema.KnownLike {
    node: NodeNest.GlobalLike;
    type: MemberType.Import | MemberType.Export | MemberType.ExportDefault;
}

export interface ESMLike extends ZSchema.Base, ZSchema.KnownLike, ZSchema.GlobalLike {
    node: NodeNest.ESMLike;
    type: MemberType.Import | MemberType.Export | MemberType.ExportDefault;
}

export interface DefinitionLike extends ZSchema.Base, ZSchema.KnownLike {
    node: NodeNest.DefinitionLike;
    type: MemberType.Import | MemberType.Export | MemberType.ExportDefault | MemberType.Type | MemberType.Interface | MemberType.Variable | MemberType.Function;
    nameNode?: BindingName | null;
}

export interface DefinitionOnly extends ZSchema.Base, ZSchema.KnownLike, ZSchema.DefinitionLike {
    node: NodeNest.DefinitionOnly;
    type: MemberType.Type | MemberType.Interface | MemberType.Variable | MemberType.Function;
}

export interface SchemaLike extends ZSchema.Base, ZSchema.KnownLike, ZSchema.DefinitionLike {
    node: NodeNest.SchemaLike;
    type: MemberType.Import | MemberType.Export | MemberType.ExportDefault | MemberType.Type | MemberType.Interface;
}

export interface SchemaOnly extends ZSchema.Base, ZSchema.KnownLike, ZSchema.DefinitionOnly, ZSchema.SchemaLike {
    node: NodeNest.SchemaOnly;
    type: MemberType.Type | MemberType.Interface;
}

export interface VariantLike extends ZSchema.Base, ZSchema.KnownLike, ZSchema.DefinitionLike {
    node: NodeNest.VariantLike;
    type: MemberType.Import | MemberType.Export | MemberType.ExportDefault | MemberType.Variable | MemberType.Function;
}

export interface VariantOnly extends ZSchema.Base, ZSchema.KnownLike, ZSchema.DefinitionOnly, ZSchema.VariantLike {
    node: NodeNest.VariantOnly;
    type: MemberType.Variable | MemberType.Function;
}

export interface InitializerLike extends ZSchema.Base, ZSchema.KnownLike {
    node: NodeNest.InitializerLike;
    type: MemberType.Value | MemberType.ArrowFunction | MemberType.FunctionExpression;
}

export interface ValueVariable extends ZSchema.Variable {
    initializer?: Value;
    declaredTypeNode?: TypeNode;
}

export interface FunctionalVariable extends ZSchema.Variable {
    initializer?: FunctionAlt;
}

export interface FunctionLike extends ZSchema.Base {
    node: NodeNest.FunctionLike;
    returnTypeNode?: TypeNode;
    paramTypeNode?: TypeNode;
}

export interface FunctionAlt extends ZSchema.FunctionLike {
    node: NodeNest.FunctionAlt;
    type: MemberType.ArrowFunction | MemberType.FunctionExpression;
}

//

export type FunctionalVariant =
    | ZSchema.Function
    | ZSchema.FunctionalVariable;