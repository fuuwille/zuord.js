import Module from "./module.tzs";
import { ModuleContentKind } from "./moduleContent";
import { Diagnostic } from "./diagnostic";
import { FileMember } from "./member";

export interface Base {
    module: Module;
    member: FileMember.DefinitionLike;
    kind: ModuleContentKind;
    name?: string | null;
    diagnostics?: Diagnostic.Base[];
}

export interface Schema extends ZSchema.Base {
    member: FileMember.SchemaLike;
    kind: ModuleContentKind.Schema;
    variants?: Variant[];
}

export interface Variant extends ZSchema.Base {
    schema?: Schema;
    kind: ModuleContentKind.Variant;
    member: FileMember.VariantLike;
}

//

export interface ValueVariant extends ZSchema.Variant {
    member: FileMember.ValueVariable;
    declaredSchemaName?: string | null;
}

export interface FunctionalVariant extends ZSchema.Variant {
    member: FileMember.FunctionalVariant;
    returnSchemaName?: string | null;
    paramSchemaName?: string | null;
}