import { SyntaxKind } from "ts-morph";
import { FileType, FileExtension, getType } from "./file";
import { ValueSyntaxKind, valueSyntaxKinds } from "./~valueSyntax";

export const isImport = (node: ZSchema.Base): node is ZSchema.Import => {
    return node.getKind() === SyntaxKind.ImportDeclaration;
}

export const isExport = (node: ZSchema.Base): node is ZSchema.Export => {
    return node.getKind() === SyntaxKind.ExportDeclaration;
}

export const isExportDefault = (node: ZSchema.Base): node is ZSchema.ExportDefault => {
    return node.getKind() === SyntaxKind.ExportAssignment;
}

export const isType = (node: ZSchema.Base): node is ZSchema.Type => {
    return node.getKind() === SyntaxKind.TypeAliasDeclaration;
}

export const isInterface = (node: ZSchema.Base): node is ZSchema.Interface => {
    return node.getKind() === SyntaxKind.InterfaceDeclaration;
}

export const isClass = (node: ZSchema.Base): node is ZSchema.Class => {
    return node.getKind() === SyntaxKind.ClassDeclaration;
}

export const isEnum = (node: ZSchema.Base): node is ZSchema.Enum => {
    return node.getKind() === SyntaxKind.EnumDeclaration;
}

export const isVariable = (node: ZSchema.Base): node is ZSchema.Variable => {
    return node.getKind() === SyntaxKind.VariableStatement;
}

export const isFunction = (node: ZSchema.Base): node is ZSchema.Function => {
    return node.getKind() === SyntaxKind.FunctionDeclaration;
}

export const isValue = (node: ZSchema.Base): node is ZSchema.Value => {
    return valueSyntaxKinds.includes(node.getKind() as ValueSyntaxKind);
}

export const isArrowFunction = (node: ZSchema.Base): node is ZSchema.ArrowFunction => {
    return node.getKind() === SyntaxKind.ArrowFunction;
}

export const isFunctionExpression = (node: ZSchema.Base): node is ZSchema.FunctionExpression => {
    return node.getKind() === SyntaxKind.FunctionExpression;
}

//

export const isKnownLike = (node: ZSchema.Base): node is ZSchema.KnownLike => {
    return isESMLike(node) || isSchemaOnly(node) || isVariantOnly(node) || isInitializerLike(node);
}

export const isGlobalLike = (node: ZSchema.Base): node is ZSchema.GlobalLike => {
    return isESMLike(node);
}

export const isESMLike = (node: ZSchema.Base): node is ZSchema.ESMLike => {
    return isImport(node) || isExportLike(node);
}

export const isExportLike = (node: ZSchema.Base): node is ZSchema.ExportLike => {
    return isExport(node) || isExportDefault(node);
}

export const isDefinitionLike = (node: ZSchema.Base): node is ZSchema.DefinitionLike => {
    return isGlobalLike(node) || isDefinitionOnly(node);
}

export const isDefinitionOnly = (node: ZSchema.Base): node is ZSchema.DefinitionOnly => {
    return isSchemaOnly(node) || isVariantOnly(node);
}

export const isSchemaLike = (node: ZSchema.Base): node is ZSchema.SchemaLike => {
    return isGlobalLike(node) || isSchemaOnly(node);
}

export const isSchemaOnly = (node: ZSchema.Base): node is ZSchema.SchemaOnly => {
    return isType(node) || isInterface(node) || isClass(node) || isEnum(node);
}

export const isVariantLike = (node: ZSchema.Base): node is ZSchema.VariantLike => {
    return isGlobalLike(node) || isVariantOnly(node);
}

export const isVariantOnly = (node: ZSchema.Base): node is ZSchema.VariantOnly => {
    return isVariable(node) || isFunction(node);
}

export const isInitializerLike = (node: ZSchema.Base): node is ZSchema.InitializerLike => {
    return isValue(node) || isArrowFunction(node) || isFunctionExpression(node);
}

export const isFunctionLike = (node: ZSchema.Base): node is ZSchema.FunctionLike => {
    return isFunction(node) || isFunctionAlt(node);
}

export const isFunctionAlt = (node: ZSchema.Base): node is ZSchema.FunctionAlt => {
    return isArrowFunction(node) || isFunctionExpression(node);
}

//

export const isDiscardedBy = (node: ZSchema.Base, mode : FileExtension): node is ZSchema.Discarded => {
    switch(getType(mode)) {
        case FileType.Schema:
            return isDiscardedSchema(node);
        case FileType.Variant:
            return isDiscardedVariant(node);
        default:
            return false;
    }
}

export const isDiscardedSchema = (node: ZSchema.Base): node is ZSchema.DiscardedSchema => {
    return isVariantOnly(node);
}

export const isDiscardedVariant = (node: ZSchema.Base): node is ZSchema.DiscardedVariant => {
    return isSchemaOnly(node);
}